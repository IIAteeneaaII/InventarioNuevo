generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol {
  UAI // Administrador de Inventario
  UA // User Almacén
  UV // User Visualizador
  UReg // User Registro
  UTI // User Test Inicial
  UR // User Retest
  UC // User Cosmetica
  UE // User Empaque
  ULL // User Liberacion y limpieza
  UEN // User Ensamble
}

enum EstadoRegistro {
  SN_OK
  SCRAP_COSMETICO
  SCRAP_ELECTRONICO
  SCRAP_INFESTACION
  REPARACION
}

enum EstadoLote {
  EN_PROCESO
  PAUSADO
  COMPLETADO
  CANCELADO
}

enum FaseProceso {
  REGISTRO
  TEST_INICIAL
  COSMETICA
  LIBERACION_LIMPIEZA
  ENSAMBLE // Nueva fase añadida
  RETEST
  EMPAQUE
}

// Usuario del sistema
model User {
  id                 Int                @id @default(autoincrement())
  nombre             String
  userName           String             @unique
  email              String             @unique
  password           String
  rol                Rol
  activo             Boolean
  deletedAt          DateTime?
  registros          Registro[]
  lotes              Lote[]             @relation("UserLotes")
  logs               Log[]
  modems             Modem[]
  transiciones       TransicionFase[]
  estadoTransiciones EstadoTransicion[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

// Catálogo de SKUs/Productos
model CatalogoSKU {
  id          Int     @id @default(autoincrement())
  nombre      String  @unique
  descripcion String?
  lotes       Lote[]
  modems      Modem[]
}

// Lotes de trabajo
model Lote {
  id            Int         @id @default(autoincrement())
  numero        String      @unique
  skuId         Int
  sku           CatalogoSKU @relation(fields: [skuId], references: [id])
  estado        EstadoLote  @default(EN_PROCESO)
  prioridad     Int         @default(5) // Mayor número = mayor prioridad
  responsableId Int
  responsable   User        @relation("UserLotes", fields: [responsableId], references: [id])
  registros     Registro[]
  modems        Modem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime? // Borrado lógico
}

// Modems/Dispositivos a procesar
model Modem {
  id              Int                @id @default(autoincrement())
  sn              String             @unique
  skuId           Int?
  sku             CatalogoSKU?       @relation(fields: [skuId], references: [id])
  estadoActualId  Int
  estadoActual    Estado             @relation(fields: [estadoActualId], references: [id])
  faseActual      FaseProceso
  loteId          Int
  lote            Lote               @relation(fields: [loteId], references: [id])
  registros       Registro[]
  responsableId   Int
  responsable     User               @relation(fields: [responsableId], references: [id])
  transiciones    TransicionFase[]
  estadoHistorial EstadoTransicion[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  deletedAt       DateTime? // Borrado lógico
}

// Registros de acciones realizadas
model Registro {
  id            Int            @id @default(autoincrement())
  sn            String
  fase          FaseProceso
  estado        EstadoRegistro
  motivoScrap   MotivoScrap?   @relation(fields: [motivoScrapId], references: [id])
  motivoScrapId Int?
  reparacion    String?
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  loteId        Int
  lote          Lote           @relation(fields: [loteId], references: [id])
  modemId       Int
  modem         Modem          @relation(fields: [modemId], references: [id])
  createdAt     DateTime       @default(now())

  @@index([userId])
  @@index([loteId])
  @@index([modemId])
}

// Transiciones entre fases
model TransicionFase {
  id        Int          @id @default(autoincrement())
  modemId   Int
  modem     Modem        @relation(fields: [modemId], references: [id])
  faseDesde FaseProceso?
  faseHacia FaseProceso
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
}

// Motivos para scrap
model MotivoScrap {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  registros Registro[]
}

// Log de actividades
model Log {
  id        Int      @id @default(autoincrement())
  accion    String
  entidad   String
  detalle   String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

//=== TABLAS PARA MÁQUINA DE ESTADOS ===//

// Definición de estados posibles en el sistema
model Estado {
  id                  Int                @id @default(autoincrement())
  nombre              String             @unique
  descripcion         String?
  codigoInterno       String             @unique // Código técnico para programación
  esFinal             Boolean            @default(false)
  requiereObservacion Boolean            @default(false)
  ordenDisplay        Int                @default(0)
  color               String? // Color para UI (hex o nombre)
  modems              Modem[] // Modems actualmente en este estado
  transicionesDesde   TransicionEstado[] @relation("EstadoDesde")
  transicionesHacia   TransicionEstado[] @relation("EstadoHacia")
  historial           EstadoTransicion[] @relation("EstadoAnterior")
  historialNuevo      EstadoTransicion[] @relation("EstadoNuevo")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

// Transiciones permitidas entre estados
model TransicionEstado {
  id                  Int      @id @default(autoincrement())
  estadoDesdeId       Int
  estadoDesde         Estado   @relation("EstadoDesde", fields: [estadoDesdeId], references: [id])
  estadoHaciaId       Int
  estadoHacia         Estado   @relation("EstadoHacia", fields: [estadoHaciaId], references: [id])
  nombreEvento        String // Nombre del evento que causa la transición
  descripcion         String?
  requiereCantidad    Boolean  @default(false)
  requiereObservacion Boolean  @default(false)
  rolesPermitidos     String? // Lista separada por comas de roles permitidos
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([estadoDesdeId, nombreEvento])
  @@index([estadoDesdeId])
  @@index([estadoHaciaId])
}

// Historial de transiciones de estado por modem
model EstadoTransicion {
  id               Int         @id @default(autoincrement())
  modemId          Int
  modem            Modem       @relation(fields: [modemId], references: [id])
  estadoAnteriorId Int?
  estadoAnterior   Estado?     @relation("EstadoAnterior", fields: [estadoAnteriorId], references: [id])
  estadoNuevoId    Int
  estadoNuevo      Estado      @relation("EstadoNuevo", fields: [estadoNuevoId], references: [id])
  fase             FaseProceso
  evento           String // Evento que causó la transición
  cantidad         Int? // Cantidad afectada (si aplica)
  observaciones    String?
  userId           Int
  user             User        @relation(fields: [userId], references: [id])
  createdAt        DateTime    @default(now())

  @@index([modemId])
  @@index([estadoAnteriorId])
  @@index([estadoNuevoId])
  @@index([userId])
  @@index([fase])
}
